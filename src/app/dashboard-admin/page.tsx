"use client";

import { useEffect, useState } from "react";
import {
  Card,
  CardContent,
  CardHeader,
  CardTitle,
} from "../components/ui/card";
import {
  Dialog,
  DialogTrigger,
  DialogContent,
  DialogHeader,
  DialogTitle,
  DialogFooter,
} from "../components/ui/dialog";

import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import toast from "react-hot-toast";

type User = {
  isBanned: boolean;
  updatedAt: string | number | Date;
  _id: string;
  email: string;
  username: string;
  verified: boolean;
  createdAt: string;
};

type Business = {
  isBanned: boolean;
  updatedAt: string | number | Date;
  createdAt: string | number | Date;
  _id: string;
  username: string;
  email: string;
  apiKey: string;
};

export default function AdminDashboardPage() {
  const [users, setUsers] = useState<User[]>([]);
  const [businesses, setBusinesses] = useState<Business[]>([]);
  const [editingKey, setEditingKey] = useState<string | null>(null);
  const [newApiKey, setNewApiKey] = useState<string>("");
  const [loading, setLoading] = useState(true);
  const [newUser, setNewUser] = useState({
    username: "",
    email: "",
    password: "",
    role: "user", // default
    businessId: "",
  });

  useEffect(() => {
    const fetchData = async () => {
      try {
        const userRes = await fetch("/api/admin/users");
        const userData = await userRes.json();
        if (Array.isArray(userData.users)) {
          setUsers(userData.users);
        } else {
          toast.error("D·ªØ li·ªáu ng∆∞·ªùi d√πng kh√¥ng h·ª£p l·ªá");
        }

        const bizRes = await fetch("/api/admin/businesses");
        const bizData = await bizRes.json();
        if (Array.isArray(bizData.businesses)) {
          setBusinesses(bizData.businesses);
        } else {
          toast.error("D·ªØ li·ªáu doanh nghi·ªáp kh√¥ng h·ª£p l·ªá");
        }
      } catch {
        toast.error("L·ªói khi t·∫£i d·ªØ li·ªáu");
      } finally {
        setLoading(false);
      }
    };

    fetchData();
  }, []);

  const updateApiKey = async (businessId: string) => {
    try {
      const res = await fetch(`/api/admin/businesses/${businessId}`, {
        method: "PUT",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ apiKey: newApiKey }),
      });
      if (res.ok) {
        toast.success("‚úÖ ƒê√£ c·∫≠p nh·∫≠t API key");
        setEditingKey(null);
        const updated = await res.json();
        setBusinesses((prev) =>
          prev.map((b) => (b._id === businessId ? updated.business : b))
        );
      } else {
        toast.error("‚ùå C·∫≠p nh·∫≠t th·∫•t b·∫°i");
      }
    } catch {
      toast.error("‚ùå C√≥ l·ªói x·∫£y ra khi c·∫≠p nh·∫≠t");
    }
  };

  if (loading) {
    return (
      <div className="p-6 text-center text-lg">üîÑ ƒêang t·∫£i d·ªØ li·ªáu...</div>
    );
  }

  return (
    <div className="p-6 space-y-10 max-w-6xl mx-auto mt-15">
      <h1 className="text-3xl font-extrabold mb-4 text-center text-main">
        üõ†Ô∏è Admin Dashboard üõ†Ô∏è
      </h1>
      <div className="flex justify-end mb-4">
        <Dialog>
          <DialogTrigger asChild>
            <Button className="bg-main text-white mb-4">
              + Th√™m ng∆∞·ªùi d√πng
            </Button>
          </DialogTrigger>
          <DialogContent className="max-w-2xl">
            <DialogHeader>
              <DialogTitle>Th√™m ng∆∞·ªùi d√πng m·ªõi</DialogTitle>
            </DialogHeader>
            <div className="grid grid-cols-1 md:grid-cols-2 gap-4 py-4">
              <Input
                placeholder="T√™n ng∆∞·ªùi d√πng"
                value={newUser.username}
                onChange={(e) =>
                  setNewUser({ ...newUser, username: e.target.value })
                }
              />
              <Input
                placeholder="Email"
                value={newUser.email}
                onChange={(e) =>
                  setNewUser({ ...newUser, email: e.target.value })
                }
              />
              <Input
                placeholder="M·∫≠t kh·∫©u"
                type="password"
                value={newUser.password}
                onChange={(e) =>
                  setNewUser({ ...newUser, password: e.target.value })
                }
              />
              <select
                className="border rounded-md p-2"
                value={newUser.role}
                onChange={(e) =>
                  setNewUser({ ...newUser, role: e.target.value })
                }
              >
                <option value="user">User</option>
                <option value="business">Business</option>
                <option value="admin">Admin</option>
              </select>
              {newUser.role === "user" && (
                <select
                  className="border rounded-md p-2"
                  value={newUser.businessId}
                  onChange={(e) =>
                    setNewUser({ ...newUser, businessId: e.target.value })
                  }
                >
                  <option value="">-- Ch·ªçn doanh nghi·ªáp --</option>
                  {businesses.map((biz) => (
                    <option key={biz._id} value={biz._id}>
                      {biz.username}
                    </option>
                  ))}
                </select>
              )}
            </div>
            <DialogFooter>
              <Button
                onClick={async () => {
                  try {
                    const res = await fetch(
                      `/api/admin/${newUser.role === "user" ? "users" : "businesses"}`,
                      {
                        method: "POST",
                        headers: { "Content-Type": "application/json" },
                        body: JSON.stringify(newUser),
                      }
                    );
                    if (res.ok) {
                      const created = await res.json();

                      if (newUser.role === "user") {
                        setUsers((prev) => [...prev, created.user]);
                      } else {
                        setBusinesses((prev) => [...prev, created.user]);
                      }
                      toast.success("‚úÖ ƒê√£ t·∫°o ng∆∞·ªùi d√πng");
                      setNewUser({
                        username: "",
                        email: "",
                        password: "",
                        role: "user",
                        businessId: "",
                      });
                    } else {
                      toast.error("‚ùå L·ªói khi t·∫°o ng∆∞·ªùi d√πng");
                    }
                  } catch {
                    toast.error("‚ùå C√≥ l·ªói x·∫£y ra khi g·ª≠i y√™u c·∫ßu");
                  }
                }}
                className="bg-main text-white w-full"
              >
                T·∫°o ng∆∞·ªùi d√πng
              </Button>
            </DialogFooter>
          </DialogContent>
        </Dialog>
      </div>

      {/* USERS TABLE */}
      <Card className="shadow-lg rounded-2xl">
        <CardHeader>
          <CardTitle className="text-xl">üë§ Danh s√°ch ng∆∞·ªùi d√πng</CardTitle>
        </CardHeader>
        <CardContent className="overflow-x-auto">
          <table className="w-full text-sm border rounded-md">
            <thead className="bg-gray-100 text-gray-700">
              <tr className="text-left border-b">
                <th className="py-2 px-3">ID</th>
                <th className="py-2 px-3">T√™n</th>
                <th className="py-2 px-3">Email</th>
                <th className="py-2 px-3">eKYC</th>
                <th className="py-2 px-3">Ng√†y t·∫°o</th>
                <th className="py-2 px-3">Ng√†y c·∫≠p nh·∫≠t</th>
                <th className="py-2 px-3">Tr·∫°ng th√°i</th>
              </tr>
            </thead>
            <tbody>
              {users.map((user) => (
                <tr
                  key={user._id}
                  className="border-b odd:bg-gray-50 hover:bg-gray-100 transition"
                >
                  <td className="py-2 px-3">{user._id}</td>
                  <td className="py-2 px-3">{user.username}</td>
                  <td className="py-2 px-3">{user.email}</td>
                  <td className="py-2 px-3">
                    {user.verified ? "‚úÖ Enrolled" : "‚ùå Not yet"}
                  </td>
                  <td className="py-2 px-3">
                    {new Date(user.createdAt).toLocaleString()}
                  </td>
                  <td className="py-2 px-3">
                    {new Date(user.updatedAt).toLocaleString()}
                  </td>
                  <td className="py-2 px-3">
                    {user.isBanned ? "‚ùåB·ªã ban" : "‚úÖHo·∫°t ƒë·ªông"}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </CardContent>
      </Card>

      {/* BUSINESSES TABLE */}
      <Card className="shadow-lg rounded-2xl">
        <CardHeader>
          <CardTitle className="text-xl">üè¢ Danh s√°ch doanh nghi·ªáp</CardTitle>
        </CardHeader>
        <CardContent className="overflow-x-auto">
          <table className="w-full text-sm border rounded-md">
            <thead className="bg-gray-100 text-gray-700">
              <tr className="text-left border-b">
                <th className="py-2 px-3">ID</th>
                <th className="py-2 px-3">T√™n</th>
                <th className="py-2 px-3">Email</th>
                <th className="py-2 px-3">Ng√†y t·∫°o</th>
                <th className="py-2 px-3">Ng√†y c·∫≠p nh·∫≠t</th>
                <th className="py-2 px-3">Tr·∫°ng th√°i</th>
                <th className="py-2 px-3">API Key</th>
                <th className="py-2 px-3">Thao t√°c</th>
              </tr>
            </thead>
            <tbody>
              {businesses.map((biz) => (
                <tr
                  key={biz._id}
                  className="border-b odd:bg-gray-50 hover:bg-gray-100 transition align-top"
                >
                  <td className="py-2 px-3">{biz._id}</td>
                  <td className="py-2 px-3">{biz.username}</td>
                  <td className="py-2 px-3">{biz.email}</td>
                  <td className="py-2 px-3">
                    {new Date(biz.createdAt).toLocaleString()}
                  </td>
                  <td className="py-2 px-3">
                    {new Date(biz.updatedAt).toLocaleString()}
                  </td>
                  <td className="py-2 px-3">
                    {biz.isBanned ? "‚ùåB·ªã ban" : "‚úÖHo·∫°t ƒë·ªông"}
                  </td>
                  <td className="py-2 px-3 w-64">
                    {editingKey === biz._id ? (
                      <Input
                        value={newApiKey}
                        onChange={(e) => setNewApiKey(e.target.value)}
                        className="w-full"
                      />
                    ) : (
                      <span className="truncate block">{biz.apiKey}</span>
                    )}
                  </td>
                  <td className="py-2 px-3">
                    {editingKey === biz._id ? (
                      <Button
                        onClick={() => updateApiKey(biz._id)}
                        className="bg-green-600 hover:bg-green-700 text-white"
                        title="L∆∞u API Key"
                      >
                        üíæ L∆∞u
                      </Button>
                    ) : (
                      <Button
                        onClick={() => {
                          setEditingKey(biz._id);
                          setNewApiKey(biz.apiKey);
                        }}
                        className="bg-main text-white"
                        title="Ch·ªânh s·ª≠a API Key"
                      >
                        Update API Key
                      </Button>
                    )}
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </CardContent>
      </Card>
    </div>
  );
}
