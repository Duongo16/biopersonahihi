import { NextResponse } from "next/server";
import connectDB from "@/utils/db";
import User from "@/utils/models/User";
import bcrypt from "bcryptjs";
import nodemailer from "nodemailer";

export async function POST(req: Request) {
  try {
    await connectDB();
    const { email } = await req.json();

    if (!email) {
      return NextResponse.json(
        { message: "Email l√† b·∫Øt bu·ªôc" },
        { status: 400 }
      );
    }

    const user = await User.findOne({ email });
    if (!user) {
      return NextResponse.json(
        { message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng" },
        { status: 404 }
      );
    }

    // T·∫°o m·∫≠t kh·∫©u m·ªõi ng·∫´u nhi√™n
    const newPassword = Math.random().toString(36).slice(-8); // v√≠ d·ª•: "g7x9q2jz"
    const hashed = await bcrypt.hash(newPassword, 10);

    user.password = hashed;
    await user.save();

    // G·ª≠i m·∫≠t kh·∫©u m·ªõi qua email
    const transporter = nodemailer.createTransport({
      service: "Gmail",
      auth: {
        user: process.env.EMAIL_USER,
        pass: process.env.EMAIL_PASS,
      },
    });

    await transporter.sendMail({
      from: process.env.EMAIL_USER,
      to: email,
      subject: "üîê M·∫≠t kh·∫©u m·ªõi t·ª´ h·ªá th·ªëng",
      html: `
        <p>Ch√†o ${user.username},</p>
        <p>M·∫≠t kh·∫©u m·ªõi c·ªßa b·∫°n l√†: <strong>${newPassword}</strong></p>
        <p>Vui l√≤ng ƒëƒÉng nh·∫≠p v√† ƒë·ªïi l·∫°i m·∫≠t kh·∫©u ngay sau ƒë√≥.</p>
        <p>Tr√¢n tr·ªçng,<br/>ƒê·ªôi ng≈© h·ªó tr·ª£</p>
      `,
    });

    return NextResponse.json({
      message: "‚úÖ M·∫≠t kh·∫©u m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email c·ªßa b·∫°n",
    });
  } catch (error) {
    console.error("Forgot password error:", error);
    return NextResponse.json({ message: "‚ùå L·ªói h·ªá th·ªëng" }, { status: 500 });
  }
}
